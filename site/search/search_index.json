{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome","text":"<p>Welcome to the Tudat Developer documentation. This documentation is intended for developers who want to contribute to the Tudat project. It contains information on how to set up your development environment, how to build Tudat, and how to contribute to the project.</p> <p> </p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started, you should first read the Primer section of the documentation. This section contains information on how to set up your development environment, how to build Tudat, and how to contribute to the project.</p> <ul> <li>Homebase</li> <li>Workspace</li> <li>Software</li> </ul>"},{"location":"#guides","title":"Guides","text":"<p>The Guides section contains more in-depth information on specific topics. These guides are intended for developers who want to contribute to the Tudat project.</p> <ul> <li>Create a bugfix</li> <li>Create a release</li> <li>Create a feature branch</li> </ul>"},{"location":"#reference","title":"Reference","text":"<p>The Reference section contains information on the Tudat codebase. This section is intended for developers who want to contribute to the Tudat project.</p> <ul> <li>Code style</li> <li>Git workflow</li> <li>Tudat codebase</li> <li>Tudat libraries</li> <li>Tudat applications</li> </ul>"},{"location":"guides/create-bugfix/","title":"Create a Bugfix","text":"<p>Reference</p> <p>You can refer to the Tudat Developer Reference on Developer workflows for the complete technical details of the workflows.</p>"},{"location":"guides/create-feature/","title":"Create a Feature","text":"<p>Reference</p> <p>You can refer to the Tudat Developer Reference on Developer workflows for the complete technical details of the workflows.</p>"},{"location":"guides/create-feedstock/","title":"Create a Feedstock","text":"<p>Reference</p> <p>You can refer to the Tudat Developer Reference on Developer workflows for the complete technical details of the workflows.</p>"},{"location":"guides/create-hotfix/","title":"Create a Hotfix","text":"<p>Reference</p> <p>You can refer to the Tudat Developer Reference on Developer workflows for the complete technical details of the workflows.</p>"},{"location":"guides/create-release/","title":"Create a Release","text":"<p>Reference</p> <p>You can refer to the Tudat Developer Reference on Developer workflows for the complete technical details of the workflows.</p>"},{"location":"guides/setup-repository/","title":"Setup GitHub Repository","text":""},{"location":"guides/update-conda-token/","title":"Update Anaconda Cloud Token","text":""},{"location":"guides/update-conda-token/#update-anaconda-cloud-token","title":"Update Anaconda Cloud Token","text":""},{"location":"guides/update-conda-token/#procedure","title":"Procedure","text":""},{"location":"primer/azure/","title":"Azure","text":""},{"location":"primer/devops/","title":"Development Operations (DevOps)","text":""},{"location":"primer/docstring_templates/","title":"Docstrings","text":""},{"location":"primer/docstring_templates/#yaml-templates","title":"YAML templates","text":"<p>Below, templates to write docstrings of tudat and tudatpy objects are provided.</p> <p>Note</p> <p>It is assumed that the reader is familiar with the content of the page about <code>How to write docstrings</code>.</p>"},{"location":"primer/docstring_templates/#enumerations","title":"Enumerations","text":"<p>Note</p> <p>This template was adapted from the docstrings of the <code>RadiationPressureType</code> enum (see it on GitHub), therefore it refers to environment settings objects. However, its content can be adapted to other base classes.</p> <p>Legend:</p> <ul> <li><code>&lt;XXX&gt;</code> = name of the enumeration</li> <li><code>&lt;memberXName&gt;</code> = member number X of the enumeration</li> </ul> <pre><code>enums:\n\n#    py::enum_&lt;XXX&gt;\n#        enum XXX\n\n- name: &lt;enumPythonName&gt;\nshort_summary: \"What this enum is about\"\n\nmembers:\n- name: &lt;member1Name&gt;\n- name: &lt;member2Name&gt;\n- ...\n</code></pre>"},{"location":"primer/docstring_templates/#classes","title":"Classes","text":""},{"location":"primer/docstring_templates/#base-class","title":"Base class","text":"<p>Note</p> <p>This template was adapted from the docstrings of the <code>EphemerisSettings</code> class (see it on Github), therefore it refers to environment settings objects. However, its content can be adapted to other base classes.</p> <p>Legend:</p> <ul> <li><code>&lt;XXX&gt;</code> = class name</li> <li><code>&lt;pyattribute_1&gt;</code> = some attribute of class, which via the get/set cpp   functions is exposed as a class property in python</li> <li><code>&lt;pytype_1&gt;</code> = type of <code>&lt;pyattribute_1&gt;</code></li> <li><code>&lt;description_1&gt;</code> = brief description of <code>&lt;pyattribute_1&gt;</code></li> <li><code>&lt;pyattribute_2&gt;</code> = ...</li> </ul> <pre><code>classes:\n\n- name: &lt;XXX&gt;Settings\nshort_summary: \"Base class for providing settings for &lt;XXX&gt; model.\"\nextended_summary: |\nFunctional (base) class for settings of &lt;XXX&gt; models that require no information in addition to their type.\n&lt;XXX&gt; model classes requiring additional information must be created using an object derived from this class.\n\nattributes:  # [py]  note: attributes for python only!\n# note that &lt;attribute_1&gt; is read/write because tudatpy has get/reset functions for &lt;attribute_1&gt; (documented  under methods).\n- name: &lt;attribute_1&gt; # [py]\ntype: &lt;pytype_1&gt; # [py]\ndescription: &lt;description_1&gt; # [py]\n# note that &lt;attribute_2&gt; is readonly because tudatpy has only a get functions to access &lt;attribute_2&gt; (documented under methods).\n- name: &lt;attribute_2&gt; # [py]  readonly\ntype: &lt;pytype_2&gt; # [py]\ndescription: &lt;description_2&gt; # [py]\n\n-  ...\n\nmethods:\n# list the constructor as first method - python constructor docstrings no longer needed, since constructor  will be removed from exposure.\n\n# note that no parameters are given to discourage direct use of constructor (see **** classes and factory functions ****)\n- name: ctor # [cpp]\nshort_summary: \"Constructor.\" # [cpp]\nextended_summary: \"Instances of this class are typically not generated by the user. Settings objects for XXX models should be instantiated through the factory functions of a derived class.\" # [cpp]\n\n# now get/set methods of cpp class:\n\n- name: get&lt;attribute_1&gt; # [cpp]\nshort_summary: \"Retrieve &lt;attribute_1&gt;.\" // if &lt;cpptype_1&gt; is bool use phrase: \"Check whether ...\" # [cpp]\nextended_summary: \"Function to retrieve &lt;attribute_1&gt;.\" // if &lt;cpptype_1&gt; is bool use phrase: \"Function to retrieve boolean that...\" # [cpp]\n\n# parameters: there are no parameters in getter functions\n\nreturns: # [cpp]\n- type: &lt;cpptype_1&gt; # [cpp]\ndescription: &lt;description_1&gt; # [cpp]\n\n- name: reset&lt;attribute_1&gt; # [cpp]\nshort_summary: \"Reset &lt;attribute_1&gt;.\" // if &lt;cpptype_1&gt; is bool use phrase: \"Set whether  ...\" # [cpp]\nextended_summary: \"Function to reset &lt;attribute_1&gt;.\" // if &lt;cpptype_1&gt; is bool use phrase: \"Function to set boolean that denotes whether  ...\" # [cpp]\n\nparameters: # [cpp]\n- name: &lt;attribute_1&gt; # [cpp]\ntype: &lt;cpptype_1&gt; # [cpp]\ndescription: &lt;description_1&gt; # [cpp]\n\nreturns: there is no return in setter functions\n\n\n- name: get&lt;attribute_2&gt; # [cpp]\nshort_summary: \"Retrieve &lt;attribute_2&gt;.\" //  if &lt;cpptype_2&gt; is bool use phrase: \"Check whether ...\" # [cpp]\nextended_summary: \"Function to retrieve &lt;attribute_2&gt;.\" //  if &lt;cpptype_2&gt; is bool use phrase: \"Function to retrieve boolean that...\" # [cpp]\nparameters: there are no parameters in getter functions\nreturns: # [cpp]\n- type: &lt;cpptype_2&gt; # [cpp]\ndescription: &lt;description_2&gt; # [cpp]\n</code></pre>"},{"location":"primer/docstring_templates/#derived-class","title":"Derived class","text":"<p>Note</p> <p>This template was adapted from the docstrings of the <code>DirectSpiceEphemerisSettings</code> class (see it on Github), therefore it refers to environment settings objects. However, its content can be adapted to other derived classes.</p> <p>Legend:</p> <ul> <li><code>&lt;XXY&gt;</code> = DirectSpiceEphemeris</li> <li><code>&lt;XXX&gt;</code> = Ephemeris</li> <li><code>&lt;xxy&gt;</code> = directSpiceEphemerisSettings (factory function)</li> </ul> <p>Note</p> <p>Public attributes &amp; methods from the <code>&lt;XXX&gt;</code> base class do not have to be re-documented in derived classes (they are inherited in the API).</p> <pre><code>- name: &lt;XXY&gt;Settings\nshort_summary: \"Class for defining settings of &lt;XXY&gt;.\"\nextended_summary: \"`&lt;XXX&gt;Settings` derived class for ephemeris which &lt;minimal description of derived class&gt;.\"\n\nattributes:\n# same scheme as documenting attributes from base class: python only, distinction read/write\n\nmethods:  python constructor docstrings no longer needed, since constructor will be removed from exposure.\n- name: ctor # [cpp]\nshort_summary: \"Constructor.\" # [cpp]\nextended_summary: \"Instances of the `&lt;XXY&gt;Settings` class should be created through the `&lt;xxy&gt;` factory function.\" # [cpp]\n\n# other methods, documented in the same style as in base class\n</code></pre>"},{"location":"primer/docstring_templates/#functions","title":"Functions","text":"<p>Note</p> <p>This template was adapted from the docstrings of the <code>directSpiceEphemerisSettings</code> factory function (see it on Github), therefore it refers to environment settings objects. However, its content can be adapted to other functions.</p> <p>Legend:</p> <ul> <li><code>&lt;XXY&gt;</code> = DirectSpiceEphemeris</li> <li><code>&lt;XXX&gt;</code> = Ephemeris</li> <li><code>&lt;xxy&gt;</code> = directSpiceEphemerisSettings (FF)</li> </ul> <pre><code>functions:\n\n- name: &lt; python_name of &lt;xxy&gt; &gt; # [py]\n- name: &lt;xxy&gt;  # [cpp]\nshort_summary: \"Factory function for creating &lt; brief description of the function that the created object serves &gt;.\"\nextended_summary: |\nFactory function for settings object, &lt; brief description of the function that the created object serves &gt;.\n&lt; additional info / context, mostly found on tudat-space/API/... website &gt;\nThis function creates an instance of an `&lt;XXX&gt;Settings` derived `&lt;XXY&gt;Settings` object.\n\nparameters:\n- name: &lt;pyparametername_1&gt; # [py]\ntype: &lt;pytype_1&gt; # [py]\nif parameters have a default value --&gt;  type: &lt;pytype_1&gt;, default=&lt;default_value&gt; # [py]\n- name: &lt;parametername_1&gt; # [cpp]\ntype: &lt;type_1&gt; # [cpp]\ndescription: &lt;description_1&gt;\n\n- name: &lt;pyparametername_2&gt; # [py]\ntype: &lt;pytype_2&gt; # [py]\nif parameters have a default value --&gt;  type: &lt;pytype_2&gt;, default=&lt;default_value&gt; # [py]\n- name: &lt;parametername_2&gt; # [cpp]\ntype: &lt;type_2&gt; # [cpp]\ndescription: &lt;description_2&gt;\n\n- ...\n\nreturns:\n- type: &lt;XXY&gt;Settings  # [py]   class name of instantiated object\ndescription: [WIP] # [py]     return descriptions are WIP to incorporate whishes from Dominic, which I do not understand yet.\n- type: &lt;XXY&gt;Settings  # [cpp]  class name of instantiated object\ndescription: [WIP] # [cpp]    return descriptions are WIP to incorporate whishes from Dominic, which I do not understand yet.\n</code></pre>"},{"location":"primer/docstrings/","title":"How to write docstrings","text":""},{"location":"primer/docstrings/#how-to-write-docstrings","title":"How to write docstrings","text":"<p>In this guide, we will explain how to write docstrings for tudat and tudatpy. We will also include a template for documenting enums, classes and (factory) functions.</p>   Note    Before diving into this guide, the user should be familiar with the page about `Exposing C++ to Python`."},{"location":"primer/docstrings/#yaml-files","title":"YAML files","text":"<p>The source of docstrings are located in yaml files in the docstring \\&lt;https://github .com/tudat-team/tudat-multidoc/tree/main/docstrings&gt; directory on Github. The content is divided over a file tree structure that mimics the structure of the tudatpy exposure (see this directory on Github), which is the same structure of the tudatpy modules. Each file bundles the content of a module exposure function (i.e. Ephemeris, Gravity Field, Rotation, etc). Within each yaml file, all module classes are listed under a single \"classes\" key, while functions are listed under a single \"functions\" key.</p>   Note    For tudatpy-native classes and functions (i.e., not exposed from C++ code but directly coded in Python), the docstrings can be written directly in the Python source files. Only the name of the class and method needs to be included in the yaml file. An example of this can be found [here \\]() for the docstring and [here](https://github.com/tudat-team/tudat-multidoc/blob/0f6e77e5469ea4556a65d98796e1d28f143998d8/docstrings/plotting.yaml#L8) for the mention in the yaml file."},{"location":"primer/docstrings/#api-structure-definition","title":"API Structure Definition","text":"<p>The generic structure definition of a Python API reference system is provided below:</p> <pre><code>definition/\n\u251c\u2500\u2500 __api__.yaml\n\u251c\u2500\u2500 module1.yaml\n\u251c\u2500\u2500 module2\n\u2502         \u251c\u2500\u2500 __module__.yaml\n\u2502         \u2514\u2500\u2500 submodule1.yaml\n\u2514\u2500\u2500 module3\n    \u251c\u2500\u2500 __module__.yaml\n    \u2514\u2500\u2500 submodule2\n           \u2514\u2500\u2500 subsubmodule.yaml\n</code></pre> <p>The building blocks can be broken down into the following elements:</p> Element Description <code>__api__.[yml/yaml]</code> API configuration file. Must exist in the API structure prefix. <code>module.[yml/yaml]</code> Module configuration file. Module definition as a file implicitly infers no submodules. <code>/module</code> Module configuration directory. Must contain <code>__module__.[yml/yaml]</code> <code>submodule.[yml/yaml]</code> Submodule configuration file. Equivalent to a module configuration file."},{"location":"primer/docstrings/#yaml-files_1","title":"<code>yaml</code> files","text":"<p>YAML files contain the sources of the docstrings and are organized as key-value pairs. An example of a typical YAML file is provided below.</p>   Warning    The example taken from this docstring [file](https://github.com/tudat-team/tudat-multidoc/blob/main/docstrings/numerical_simulation/propagation_setup/integrator.yaml) but it was heavily adapted to make it shorter, so it does not contain meaningful information.   <pre><code>extended_summary: |\nThis module provides the functionality for creating integrator settings.\n\nenums:\n- name: AvailableIntegrators\nshort_summary: \"Enumeration of available integrators.\"\nextended_summary: |\nEnumeration of integrators supported by tudat.\nmembers:\n- name: euler # [cpp]\n- name: rungeKutta4 # [cpp]\n- name: euler_type # [py]\n- name: runge_kutta_4_type # [py]\n\nclasses:\n- name: IntegratorSettings\nshort_summary: \"Functional base class to define settings for integrators.\"\nextended_summary: |\nClass to define settings for numerical integrators, for instance for use in numerical integration of equations of motion/\nvariational equations. This class can be used for simple integrators such as fixed step RK and Euler. Integrators that\nrequire more settings to define have their own derived class.\nmethods:\n- name: ctor # [cpp]\nshort_summary: \"Constructor.\" # [cpp]\nextended_summary: \"Instances of this class are typically not generated by the user because this is a base class.\" # [cpp]\n\nattributes:\n- name: initial_time # [py]\ntype: float # [py]\ndescription: Initial time of the integration. # [py]\n\nfunctions:\n# Euler\n- name: eulerSettings # [cpp]\n- name: euler # [py]\nshort_summary: \"Creates the settings for the Euler integrator.\"\nextended_summary: |\nFactory function to create settings for the Euler integrator. For this integrator, the step size is kept\nconstant.\nparameters:\n- name: initialTime # [cpp]\ntype: double # [cpp]\n- name: initial_time # [py]\ntype: float # [py]\ndescription: Start time (independent variable) of numerical integration.\n\n- name: initialTimeStep # [cpp]\ntype: double # [cpp]\n- name: initial_time_step # [py]\ntype: float # [py]\ndescription: Initial and constant value for the time step.\n\nreturns:\ntype: IntegratorSettings\ndescription: Integrator settings object.\n</code></pre> <p>As the example shows, the following keys are accepted:</p> <ul> <li><code>extended_summary</code> (for the module)</li> <li><code>enums</code></li> <li><code>classes</code></li> <li><code>functions</code></li> </ul> <p>Each of those sections (except for <code>extended_summary</code>) accepts a number of items. Each item should start with:</p> <pre><code>- name: \"...\"\n</code></pre> <p>where the dots are replaced by the name of the enum, class, or function.</p>   Note    \\- Keys and values entries in YAML files require a leading dash *only if* they are part of a list. - A string can be provided in YAML files through quotation marks or with the `|` linebreak symbol.   <p>Each item also has different fields. We adopted the numpydoc documentation style. As a result, in our API reference each function or class can accept all the fields specified by numpydoc (see here for an extensive list).</p>   Warning    For enums, as they are not Python native objects, an additional `members` field is made available."},{"location":"primer/docstrings/#tudat-vs-tudatpy","title":"tudat vs. tudatpy","text":"<p>Tudat and tudatpy API documentations are generated from the same yaml files.</p> <p>Tudat-exclusive content is marked by the <code># [cpp]</code> tag, while tudatpy-exclusive content is marked by <code># [py]</code>.</p>   Note    Untagged content will be included in both API documentations.   <p>Typically, the two APIs convey the same content. That means that the same functions, parameters and returns (etc) are listed in both APIs, where names and types are adopted to the respective API ([cpp] or [py]). Most class or function summaries are the same (word-by-word) for the two APIs.</p>"},{"location":"primer/docstrings/#documentation-style","title":"Documentation style","text":"<p>The text in the docstring will be parsed and rendered by Sphinx. Therefore, any sphinx command can be used in the yaml files.</p>   Warning    There should be a balance between the readability of the raw docstrings and the intended aesthetical effects provided by Sphinx. Even if most of the users will consult the online API reference, the same docstrings will be also shipped with the `tudatpy` conda package, so the docstrings can be consulted locally. Docstrings with many Sphinx commands will be difficult to read and interpret.   <p>Below, a few important aspects of the documentation style are outlined.</p>"},{"location":"primer/docstrings/#factory-functions","title":"Factory functions","text":"All examples from this subsection have been inspired from (but do not correspond exactly to) [this file](https://github.com/tudat-team/tudat-multidoc/blob/main/docstrings/numerical_simulation/environment_setup/gravity_field.yaml).   <p>Factory functions (FFs) are functions creating instances of objects via the class constructors ) and they are intended to be the user's interface with the actual class constructors, such that the users typically do not interact with the classes as such. FFs will be used throughout all user guides, examples and tutorials. They will be the user`s landing pad in the API. It is therefore the intention to supply all functionality-related information in the docstrings of the FF. This may include (but is not limited to) complete explanations for function parameters, information about the models (that will be created by the classes), model implementation and links to external resources.</p> <pre><code>functions:\n# Factory function instantiating an object of type CentralGravityFieldSettings (see next example)\n- name: central # [py]\n- name: centralGravitySettings # [cpp]\nshort_summary: \"Factory function for central gravity field settings object.\"\nextended_summary: |\nFactory function for settings object, defining a point-mass gravity field model with user-defined gravitational parameter.\nparameters:\n- name: gravitational_parameter # [py]\ntype: float # [py]\n- name: gravitationalParameter # [cpp]\ntype: double # [cpp]\ndescription: Gravitational parameter defining the point-mass gravity field.\nreturns:\ntype: CentralGravityFieldSettings\ndescription: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.CentralGravityFieldSettings` class\n</code></pre>"},{"location":"primer/docstrings/#derived-classes","title":"(derived) classes","text":"<p>Classes, on the other hand, are documented in a more minimalistic manner, focused more on code design and hierarchy and less on the functional aspects. Constructors of classes that have FFs implemented will not be documented with <code>parameters</code> and <code>returns</code> keys, since users are discouraged from directly using the constructor method. <code>short_description</code> of the constructor method will be given by the string <code>\"Constructor\"</code>. <code>extended_description</code> of the constructor method will refer the user to use the respective FF for creating instances of the given class.</p> <pre><code>classes:\n# Derived class from GravityFieldSettings (see next example)\n- name: CentralGravityFieldSettings\nshort_summary: \"`GravityFieldSettings` derived class defining settings of point mass gravity field.\"\nextended_summary: |\nDerived class of `GravityFieldSettings` for central gravity fields, which are defined by a single gravitational parameter.\n\nmethods: # [cpp]\n# Class constructor\n- name: ctor # [cpp]\nshort_summary: \"Constructor.\" # [cpp]\nextended_summary: \"Instances of the `CentralGravityFieldSettings` class should be created through the `centralGravitySettings` factory function.\" # [cpp]\n# Class constructor's parameter\n- name: getGravitationalParameter # [cpp]\nshort_summary: \"Retrieve gravitational parameter.\" # [cpp]\nextended_summary: \"Function to retrieve gravitational parameter of the settings object.\" # [cpp]\nparameters: # [cpp]\n- name: None # [cpp]\nreturns: # [cpp]\ntype: double # [cpp]\ndescription: Gravitational parameter of central gravity field. # [cpp]\n</code></pre>"},{"location":"primer/docstrings/#base-classes","title":"Base classes","text":"<p>Base classes are to be identified as such (in <code>short_description</code>). Typically, users do not create instances of the base classes (but of the derived classes through the dedicated FFs) and this shall also be mentioned in the in the <code>extended_description</code>.</p> <pre><code>classes:\n# Base class\n- name: GravityFieldSettings\nshort_summary: \"Base class for providing settings for automatic gravity field model creation.\"\nextended_summary: |\nThis class is a functional base class for settings of gravity field models that require no information in addition to their type.\nGravity field model classes requiring additional information must be created using an object derived from this class.\n\nproperties: # [py]\n- name: gravity_field_type # [py]\ntype: GravityFieldType # [py]\ndescription: Type of gravity field model that is to be created. # [py]\nreadonly: True # [py]\n\nmethods:\n- name: __init__ # [py]\n- name: ctor # [cpp]\nshort_summary: \"Constructor.\" # [cpp]\nextended_summary: \"Instances of this class are typically not generated by the user. Settings objects for gravity field models should be instantiated through the factory functions of a derived class.\" # [cpp]\n</code></pre>"},{"location":"primer/docstrings/#python-properties-vs-c-getterssetters","title":"Python properties vs. C++ getters/setters","text":"<p>An exception to the analogous structure of the two APIs is the treatment of class attributes.</p> <p>The original get/set methods of the tudat classes are exposed as \"properties\" in tudatpy classes (see our guide about <code>Class attributes in C++ vs. in Python</code>).</p> <p>As a result, class attributes are only documented as such for the tudatpy API, while the get/set methods of the classes are documented in the tudat API instead.</p> <pre><code>classes:\n# Derived class\n- name: CentralGravityFieldSettings\nshort_summary: \"`GravityFieldSettings` derived class defining settings of point mass gravity field.\"\nextended_summary: |\nDerived class of `GravityFieldSettings` for central gravity fields, which are defined by a single gravitational parameter.\n\n# Properties (only for Python)\nproperties: # [py]\n- name: gravitational_parameter # [py]\ntype: float # [py]\ndescription: Gravitational parameter of central gravity field. # [py]\n\nmethods: # [cpp]\n- name: ctor # [cpp]\nshort_summary: \"Constructor.\" # [cpp]\nextended_summary: \"Instances of the `CentralGravityFieldSettings` class should be created through the `centralGravitySettings` factory function.\" # [cpp]\n\n# Getter (only for C++)\n- name: getGravitationalParameter # [cpp]\nshort_summary: \"Retrieve gravitational parameter.\" # [cpp]\nextended_summary: \"Function to retrieve gravitational parameter of the settings object.\" # [cpp]\nparameters: # [cpp]\n- name: None # [cpp]\nreturns: # [cpp]\ntype: double # [cpp]\ndescription: Gravitational parameter of central gravity field. # [cpp]\n\n# Setter (only for C++)\n- name: resetGravitationalParameter # [cpp]\nshort_summary: \"Reset gravitational parameter.\" # [cpp]\nextended_summary: \"Function to reset gravitational parameter of the settings object.\" # [cpp]\nparameters: # [cpp]\n- name: gravitationalParameter # [cpp]\ntype: double # [cpp]\ndescription: Gravitational parameter of central gravity field that is to be defined by the settings object. # [cpp]\n</code></pre>"},{"location":"primer/docstrings/#links-within-api-elements","title":"Links within API elements","text":"<p>It is possible to include in a docstring a link to another API element via intersphinx.</p> <p>This can be done with the following syntax:</p> <pre><code>:ObjectName:`~path.to.object`\n</code></pre> <p>where <code>ObjectName</code> can be one of the following:</p> <ul> <li><code>class</code></li> <li><code>func</code></li> </ul> <pre><code>:class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings`\n</code></pre> <pre><code>:func:`~tudatpy.numerical_simulation.environment_setup.get_default_body_settings`\n</code></pre>   Note    While this is demonstrated here for links to tudatpy methods, a link to any of python, sphinx, pagmo, numpy, scipy, or matplotlib methods is (in theory) also feasible.     Unfortunately, although other object types (such as properties or modules) should work with the same syntax (e.g., see sphinx [resource](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cross-referencing-python-objects)), it is currently not working on our API system (see this [open issue](https://github.com/tudat-team/tudat-space/issues/27#))."},{"location":"primer/docstrings/#link-docstrings-to-source-code","title":"Link docstrings to source code","text":"<p>The docstrings need to be linked in the code such that, during the API build, a connection from docstrings to the code can be made. This is different between tudat and tudatpy.</p>"},{"location":"primer/docstrings/#tudat","title":"tudat","text":"<p>This is done by placing tags right above the class/function declaration in the header files of the cpp source code (here on Github) as follows:</p>"},{"location":"primer/docstrings/#classes","title":"Classes","text":"<pre><code>//! @get_docstring(&lt;ClassName&gt;.__docstring__)\n</code></pre> <pre><code>//! @get_docstring(ThrustAccelerationSettings.__docstring__)\nclass ThrustAccelerationSettings: public AccelerationSettings{\n...\n}\n</code></pre>"},{"location":"primer/docstrings/#functions","title":"Functions","text":"<pre><code>//! @get_docstring(&lt;function_name&gt;)\n</code></pre> <pre><code>//! @get_docstring(customAccelerationSettings)\ninline std::shared_ptr&lt; AccelerationSettings &gt; customAccelerationSettings(\nconst std::function&lt; Eigen::Vector3d( const double ) &gt; accelerationFunction,\nconst std::function&lt; double( const double ) &gt; scalingFunction = nullptr ){\n...\n}\n</code></pre>"},{"location":"primer/docstrings/#overloads","title":"Overloads","text":"<p>For overload nr. X (X=0,1,...) of a function:</p> <pre><code>//! @get_docstring(&lt;function_name&gt;, X)\n</code></pre> <pre><code>//! @get_docstring(thrustAcceleration, 0)\ninline std::shared_ptr&lt; AccelerationSettings &gt; thrustAcceleration( const std::shared_ptr&lt; ThrustDirectionSettings &gt;\nthrustDirectionGuidanceSettings,\nconst std::shared_ptr&lt; ThrustMagnitudeSettings &gt; thrustMagnitudeSettings ){\n...\n}\n</code></pre>   Note    All other tags present in .cpp/.h files, used to connect the source code to the Doxygen documentation engine, should be removed, otherwise they will be automatically included in the API."},{"location":"primer/docstrings/#tudatpy","title":"tudatpy","text":"<p>In order to make the link to the exposed tudatpy classes and functions, the docstrings need to be exposed as well. This can be done as follows.</p>"},{"location":"primer/docstrings/#classes_1","title":"Classes","text":"<pre><code>get_docstring(\"&lt;ClassName&gt;\").c_str()\n</code></pre> <p>as last argument of <code>py:class_&lt;&gt;()</code>, as in</p> <pre><code>py:class_&lt;CppClass, CppPointerToClass, CppParentClass&gt;(module, \"ClassName\", get_docstring(\"&lt;ClassName&gt;\").c_str())\n</code></pre> <pre><code>py::class_&lt;tss::ThrustAccelerationSettings,\nstd::shared_ptr&lt;tss::ThrustAccelerationSettings&gt;,\ntss::AccelerationSettings&gt;(m, \"ThrustAccelerationSettings\",\nget_docstring(\"ThrustAccelerationSettings\").c_str())\n</code></pre>"},{"location":"primer/docstrings/#class-methods","title":"Class methods","text":"<pre><code>get_docstring(\"&lt;ClassName.MethodName&gt;\").c_str()\n</code></pre> <p>as last argument of <code>.def()</code>, as in</p> <pre><code>.def(\"MethodName\", CppClassName::CppMethodName, py::arg(\"ParameterName\"), ..., get_docstring(\"&lt;ClassName.MethodName&gt;\").c_str())\n</code></pre> <pre><code>.def(\"integrate_equations_of_motion\",\n&amp;tp::SingleArcDynamicsSimulator&lt;double, double&gt;::integrateEquationsOfMotion,\npy::arg(\"initial_states\"),\nget_docstring(\"SingleArcSimulator.integrate_equations_of_motion\").c_str())\n</code></pre>"},{"location":"primer/docstrings/#class-properties","title":"Class properties","text":"<pre><code>get_docstring(\"&lt;ClassName.MethodName&gt;\").c_str()\n</code></pre> <p>as last argument of .def_property() (or .def_property_readonly() for properties with a getter only), as in</p> <pre><code>.def_property(\"PropertyName\", CppClassName::CppGetterMethodName, CppClassName::CppSetterMethodName, get_docstring(\"&lt;ClassName.PropertyName&gt;\").c_str())\n</code></pre> <p>or</p> <pre><code>.def_property_readonly(\"PropertyName\", CppClassName::CppGetterMethodName, get_docstring(\"&lt;ClassName.PropertyName&gt;\").c_str())\n</code></pre> <pre><code>.def_property_readonly(\"state_history\",\n&amp;tp::SingleArcDynamicsSimulator&lt;double, double&gt;::getEquationsOfMotionNumericalSolution,\nget_docstring(\"SingleArcSimulator.state_history\").c_str())\n</code></pre>"},{"location":"primer/docstrings/#functions_1","title":"Functions","text":"<pre><code>get_docstring(\"&lt;function_name&gt;\").c_str()\n</code></pre> <p>as last argument of <code>m.def(\"&lt;function_name&gt;\", ... )</code> exposure function.</p> <pre><code>m.def(\"aerodynamic\", &amp;tss::aerodynamicAcceleration,\nget_docstring(\"aerodynamic\").c_str());\n</code></pre>"},{"location":"primer/docstrings/#overloads_1","title":"Overloads","text":"<p>For overload nr X (X=0,1,...) of an overloaded function:</p> <pre><code>get_docstring(\"&lt;function_name&gt;\", X).c_str()\n</code></pre> <p>as last argument of <code>m.def(\"&lt;function_name&gt;\", ... )</code> exposure function.</p> <pre><code>m.def(\"thrust_acceleration\", py::overload_cast&lt;const std::shared_ptr&lt;tss::ThrustDirectionSettings&gt;,\nconst std::shared_ptr&lt;tss::ThrustMagnitudeSettings&gt;&gt;(&amp;tss::thrustAcceleration),\npy::arg(\"thrust_direction_settings\"),\npy::arg(\"thrust_magnitude_settings\"),\nget_docstring(\"thrust_acceleration\", 0).c_str());\n</code></pre>   Note    Class attributes do not need the `get_docstring` tag because their docstring is automatically retrieved from the class exposure."},{"location":"primer/docstrings/#docstring-template","title":"Docstring template","text":"<p>As an additional resource, we have assembled a template to kickstart the writing process of docstrings. It can be found in <code>YAML templates</code>.</p>"},{"location":"primer/documentation/","title":"Documentation","text":"<p>Effective documentation is a critical component of any software development project, for several reasons. First, as Guido van Rossum, the creator of Python, has noted, \"Code is more often read than written.\" This means that code that is not properly documented can be difficult to understand and maintain, even for the original author.</p> <p>As Jeff Atwood, the founder of Coding Horror, has noted, \"Code tells you how; Comments tell you why.\" Documentation provides context and explanation for the code, helping other developers to understand the purpose and functionality of the code, as well as its intended usage.</p> <p>Finally, as Daniele Procida, the author of \"Documentation: An Introduction for Technical Writers and Engineers,\" has noted, \"It doesn\u2019t matter how good your software is, because if the documentation is not good enough, people will not use it.\" In order for software to be widely adopted and successful, it must be accompanied by high-quality documentation that is easy to understand and use.</p> <p>In summary, effective project documentation is critical for ensuring that code is maintainable, understandable, and usable by other developers. By providing context, explanation, and instruction, documentation can help to ensure that software is widely adopted and successful.</p>"},{"location":"primer/documentation/#diataxis-framework","title":"Di\u00e1taxis Framework","text":"<p>A systematic framework for technical documentation authoring.</p> <p>The Di\u00e1taxis framework systematically addresses the structure of technical documentation by identifying four documentation modes:</p> <ol> <li>Tutorials: Learning-oriented</li> <li>How-To Guides: Problem-oriented</li> <li>Reference: Information-oriented</li> <li>Explanation: Understanding-oriented</li> </ol> <p>Each mode serves a distinct user need and requires a unique approach to creation. The name Di\u00e1taxis comes from the Greek \"dia\" (across) and \"taxis\" (arrangement).</p> <p>The framework advocates for a hierarchical approach to organizing and presenting information, with the four modes of documentation deriving its structure from the relationship between them. Additionally, Di\u00e1taxis emphasizes the importance of the following components:</p> <ul> <li>Content: The information presented in the documentation, including text, images, diagrams, and code snippets. The content should be accurate, concise, and easy to understand.</li> <li>Navigation: The way in which users can move through the documentation to find the information they need. The framework recommends providing multiple ways to navigate the documentation, such as a table of contents, search functionality, and hyperlinks.</li> <li>Presentation: The way in which the content is visually presented to the user. The framework advocates for a clean and consistent visual design, with a focus on readability and usability. By following the Di\u00e1taxis framework, technical writers can create documentation that is well-organized, easy to navigate, and visually appealing, helping to improve user experience and increase the effectiveness of the documentation.</li> </ul> <p> </p> <p>Example</p> <p>The document that you are currently reading is an example of the \"Explanation\" mode of the Di\u00e1taxis framework, which provides high-level overviews and context to help users understand a product or technology.</p> <p>Learn more about the Di\u00e1taxis framework from the Di\u00e1taxis Framework website.</p>"},{"location":"primer/homebase/","title":"Homebase","text":""},{"location":"primer/multidoc/","title":"Multidoc","text":""},{"location":"primer/multidoc/#multidoc","title":"Multidoc","text":"<p>Multidoc is a tool for purposed towards improving maintainability and consistency of docstrings in software that is available across multiple programming languages, with fixed language equivalent APIs.</p>   `list` **Nomenclature**  ^^^  - **Application Programming Interface (API)**: An interface that defines   interactions between multiple software applications or mixed   hardware-software intermediaries. - **YAML**: (recursive acronym for \"YAML Ain't Markup Language\") A   human-readable data-serialization language. - **Jinja2**: Jinja is a modern and designer-friendly templating   language for Python. It is fast, widely used and secure."},{"location":"primer/multidoc/#functions","title":"Functions","text":"<p>https://numpydoc.readthedocs.io/en/latest/format.html#sections</p>"},{"location":"primer/multidoc/#classes","title":"Classes","text":"<p>Use the same sections as outlined above (all except Returns are applicable). The constructor (__init__) should also be documented here, the Parameters section of the docstring details the constructor\u2019s parameters.</p>"},{"location":"primer/multidoc/#constants","title":"Constants","text":"<pre><code>1. summary\n2. extended summary (optional)\n3. see also (optional)\n4. references (optional)\n5. examples (optional)\n</code></pre>"},{"location":"primer/multidoc/#modules","title":"Modules","text":"<pre><code>1. summary\n2. extended summary\n3. routine listings\n4. see also\n5. notes\n6. references\n7. examples\n</code></pre>"},{"location":"primer/readthedocs/","title":"Readthedocs","text":""},{"location":"primer/readthedocs/#release-an-online-version","title":"Release an online version","text":"<p>Every time you make a modification to the documentation, you are required to:</p> <ol> <li>branch out from develop to a <code>feature/FEATURE_NAME</code> branch (see     <code>Code Collaboration</code>)</li> <li>make the necessary modifications (see <code>Sphinx Documentation</code>)</li> <li>test the build locally (see <code>Sphinx Documentation)</code></li> <li>update the <code>CHANGELOG.md</code></li> <li>open a Pull Request into <code>develop</code> (see <code>Code Collaboration</code>)</li> <li>issue an unstable version of the documentation (see     <code>Release Versioning</code>)</li> </ol> <p>The reviewer is required to:</p> <ol> <li>review the pull request by testing it locally</li> <li>if needed, ask the developer for modifications</li> <li>merge into develop, push and check the result online (<code>latest</code>     version)</li> <li>release a stable version with <code>bumpversion</code></li> <li>merge develop into master to deploy a <code>stable</code> version of the docs</li> </ol> <p>To host our online documentation, like the one you are reading, we use readthedocs.</p>"},{"location":"primer/readthedocs/#deploying-a-version-with-readthedocs","title":"Deploying a version with <code>readthedocs</code>","text":"In this guide, we assume that the reader is familiar with how to release new versions of the documentation locally through `bumpversion` (see `bump_version`).   <p>Readthedocs uses git tags to build different versions of the documentation, with two additional versions:</p> <ul> <li><code>latest</code> (corresponding to the latest commit on <code>develop</code>)</li> <li><code>stable</code> (corresponding to the most recent version released on   <code>master</code>)</li> </ul>   Note    The landing pages for both tudat-space and the developer docs point to the `stable` version. It is still possible to switch to `latest` through the readthedocs panel (bottom left of the page, as shown below).   <p>Once commits are pushed to the <code>develop</code> branch on <code>origin</code> (or a new version tag is pushed to <code>main</code>), the documentation is built automatically by readthedocs. If changes are pushed to other branches, no documentation is built.</p>"},{"location":"primer/readthedocs/#stable-vs-unstable-versions","title":"Stable vs. unstable versions","text":"<p>Depending whether the release is stable or unstable, different things happen:</p> <ul> <li>if the release is stable (e.g., v0.1.2), the resulting documentation   is published on the website and a new version will be visible in the   readthedocs menu)</li> <li>if the release is unstable (e.g., v0.1.2dev0), the resulting   documentation will not be built nor published on the website</li> </ul>"},{"location":"primer/readthedocs/#activating-unstable-versions","title":"Activating unstable versions","text":"<p>Unpublished versions, such as unstable versions or versions from other branches, can still be activated by authorized users (i.e., readthedocs maintainers) to be viewed online and shared with others through a link. This can be done by clicking on the readthedocs menu and selecting \"Builds\", then \"Versions\" and activate build. Make it hidden to avoid it being listed on the website and searchable by the users.</p> <p>Clicking on the right build allows to see it in the browser and copy the related link to share it with collaborators. This is particularly useful to share drafts of the output documentation without modifying stable versions.</p>   Read more on how readthedocs deals with [versions](https://docs.readthedocs.io/en/stable/versions.html#)."},{"location":"primer/readthedocs/#how-different-versions-are-used-in-tudat","title":"How different versions are used in tudat","text":"<p>This is how we envisage different versions of the online docs:</p> <ul> <li>the <code>stable</code> documentation with proper versioning is the official   documentation and can be linked to different software versions</li> <li>the <code>latest</code> documentation is useful to deploy documentation quickly   and, if needed, also use it for giving/receiving feedback</li> <li>the inactive documentation (corresponding to unstable versions or   other branches) can be used for giving/receiving feedback, but they   have to be activated and hidden by maintainers of readthedocs</li> </ul>"},{"location":"primer/readthedocs/#troubleshooting","title":"Troubleshooting","text":"<p>In this section, we collect the most recurring bugs that can happen while using <code>readthedocs</code>, hoping that it will save precious time to future Tudat contributors.</p>"},{"location":"primer/readthedocs/#no-changes-shown-in-online-docs","title":"No changes shown in online docs","text":"<p>It can happen that, after pushing your changes to the <code>origin</code> repository, no changes are shown on the actual website (e.g., on tudat-space or on this website). Some suggestions to identify the problem will follow:</p> <ol> <li>Check that you pushed to the <code>main</code> branch. The documentation is     built by readthedocs only if changes are pushed to that branch.</li> <li>Check that the build was successful. This can be monitored via the     \"Builds\" link in the readthedocs_menu (see     screenshot above). If the build was not successful, you can click on     it and see the output of the build. This can be helpful to identify     where things are going wrong.</li> </ol>"},{"location":"primer/repositories/","title":"Repositories","text":""},{"location":"primer/software/","title":"Software Development","text":""},{"location":"primer/sphinx/","title":"Sphinx Documentation","text":""},{"location":"primer/sphinx/#sphinx-documentation","title":"Sphinx Documentation","text":"<pre><code>sudo apt-get install  texmaker gummi texlive texlive-full texlive-latex-recommended latexdraw intltool-debian lacheck libgtksourceview2.0-0 libgtksourceview2.0-common lmodern luatex po-debconf tex-common texlive-binaries texlive-extra-utils texlive-latex-base texlive-latex-base-doc texlive-luatex texlive-xetex texlive-lang-cyrillic texlive-fonts-extra texlive-science texlive-latex-extra texlive-pstricks\n</code></pre>   - Link checking is facilitated by sphinx using `make linkcheck` (on   windows) - Add section on FontAwesome inline icons from `sphinx-panels` -  - Add tutorial/ section on maintaining a bibliography in Sphinx."},{"location":"primer/sphinx/#compile-documentation-with-sphinx","title":"Compile documentation with Sphinx","text":"<p>This example is a step-by-step guide on how to compile the tudat documentation locally on your system using <code>sphinx</code>. This procedure works to compile documentation for both the tudat-space and the documentation you are currently reading.</p>   Note    This procedure requires that Anaconda or Miniconda is installed. For information regarding the use of the conda ecosystem, please see `Getting Started with Conda`.   <ol> <li>Create an environment that will be satisfy all dependencies required     for building documentation, then activate it. This can be done by     downloading this <code>environment.yaml</code>     (<code>yaml &lt;_static/environment.yaml&gt;</code>), which will install the     <code>tudat-docs</code> conda environment.</li> </ol> <pre><code>conda env create -f environment.yaml &amp; conda activate tudat-docs\n</code></pre> <ol> <li>Enter the root directory of a repository containing a <code>docs</code>     directory, which contains a <code>source</code> subdirectory. The following     command is specific to cloning and entering the <code>tudat-space</code>     repository.</li> </ol> <pre><code>git clone https://github.com/tudat-team/tudat-space.git &amp; cd tudat-space\n</code></pre> <ol> <li>Build the documentation using the <code>sphinx-build</code> command, specifying     that html is to be built with the supplied source and output build     directory.</li> </ol> <pre><code>sphinx-build -b html docs/source docs/build\n</code></pre> <ol> <li>View the local build of the documentation by opening the     <code>docs/build/index.html</code> with your preferred browser.</li> </ol>   Tip    **\\[PyCharm/CLion\\]** You can do this in by right clicking `index.html` in the Project tree and selecting `Open with Browser`."},{"location":"primer/sphinx/#compiling-documentation-in-pycharm","title":"Compiling Documentation in PyCharm","text":"<p>If you are using PyCharm, the compilation of the documentation after each edit can be simplified by setting up a run configuration tailored for sphinx. The procedure is described below.</p> <ol> <li>From the main toolbar, click on <code>Run &gt; Edit Configurations</code>;</li> <li>In the window that has just opened, click on the <code>+</code> button     (upper-left) to add a new configuration;</li> <li>From the drop-down menu, select <code>Python docs &gt; Sphinx task</code>;</li> </ol> <ol> <li>Give a name to the new run configuration;</li> <li>Make sure that the field <code>Command</code> is set on <code>html</code>;</li> <li>For the <code>input</code> and <code>output</code> fields, select the <code>source</code> and <code>build</code>     folders respectively.</li> </ol> <p></p> <p>Make sure that the correct run configuration is selected. If so, pressing Run will be equivalent to executing the following command from the command line:</p> <pre><code>sphinx-build -b html docs/source docs/build\n</code></pre>"},{"location":"primer/sphinx/#troubleshooting","title":"Troubleshooting","text":"<p>In this section, we collect the most recurring bugs that can happen while using sphinx, hoping that it will save precious time to future Tudat contributors.</p>"},{"location":"primer/sphinx/#no-changes-shown-in-browser","title":"No changes shown in browser","text":"<p>It happens often that the browser shows cached data instead of the updated html files. As a result, if you don't see your changes, try to empty/delete the cache of your browser (see, e.g., this guide).</p>"},{"location":"primer/sphinx/#no-changes-shown-in-online-docs","title":"No changes shown in online docs","text":"<p>It can happen that, after pushing your changes to the <code>origin</code> repository, no changes are shown on the actual website (e.g., on tudat-space or on this website). Some suggestions to identify the problem will follow:</p> <ol> <li>Check that you pushed to the <code>main</code> branch. The documentation is     built by readthedocs only if changes are pushed to that branch.</li> <li>Check that the build was successful. This can be monitored via the     \"Builds\" link in the readthedocs_menu (see screenshot above). If     the build was not successful, you can click on it and see the output     of the build. This can be helpful to identify where things are going     wrong.</li> </ol>"},{"location":"primer/sphinx/#sphinx-commands-not-working","title":"Sphinx commands not working","text":"<p>If a sphinx command does not work, for instance the following:</p> <pre><code>.. toctree::\n   intro\n   guide\n</code></pre> <p>it can be due to many things, but before going crazy into debugging mode, check that the amount of spaces before <code>intro</code> and <code>guide</code> correspond to three empty spaces. Sphinx requires three empty spaces, but the tab key corresponds to four empty spaces: if you use it in sphinx commands, it can generate a lot of confusion because the extra white space will break the sphinx command and it is very difficult to notice as well. To be clear, this will likely not work:</p> <pre><code>.. toctree::\n    intro\n    guide\n</code></pre>"},{"location":"primer/workspace/","title":"Workspace","text":""},{"location":"reference/common-commands/","title":"Common Commands","text":""},{"location":"reference/common-commands/#conda-smithy","title":"<code>conda smithy</code>","text":"<pre><code>conda smithy rerender --feedstock_directory ./foo-feedstock\n</code></pre> <p>Concerning the <code>conda-forge.yml</code></p> <p>A change to the <code>conda-forge.yml</code> file will not automatically trigger a re-rendering of the feedstock. To have the changes to <code>conda-forge.yml</code> reflected in the feedstock, you need to manually update the file and then re-render the feedstock.</p>"},{"location":"reference/common-commands/#mkdocs","title":"<code>mkdocs</code>","text":"<pre><code>mkdocs new [dir-name]  # Create a new project.\n</code></pre> <pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>mkdocs serve  # Start the live-reloading docs server.\n</code></pre> <pre><code>mkdocs build  # Build the documentation site.\n</code></pre> <pre><code>mkdocs -h     # Print help message and exit.\n</code></pre> <p>Further reference</p> <ul> <li>MkDocs: Project documentation with Markdown</li> </ul>"},{"location":"reference/common-commands/#project-layout","title":"Project layout","text":""},{"location":"reference/developer-workflows/","title":"Developer Workflows","text":""},{"location":"reference/developer-workflows/#gitflow-workflow","title":"GitFlow Workflow","text":"<p>Guides</p> <p>For complete use case examples of these workflows, see  the following Tudat Developer Guides on Developer Workflows:</p> <ul> <li>Create a feature</li> <li>Create a bugfix</li> <li>Create a hotfix</li> <li>Create a release</li> </ul> <ul> <li>Want to add a feature? See Feature</li> <li>Want to release a new stable version? See Release</li> <li>Want to fix a non-critical bug? See Bugfix</li> <li>Want to fix a bug in a release? See Hotfix</li> </ul>"},{"location":"reference/developer-workflows/#develop","title":"Develop","text":"gitGraph    commit tag: \"v1.0.0\" id: \"v1.0.0 release\" type: HIGHLIGHT    branch develop    checkout develop    commit    commit    checkout main    merge develop    commit    commit"},{"location":"reference/developer-workflows/#feature","title":"Feature","text":"%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': false}} }%% ch   commit tag: \"v1.0.0\"   branch release/v1.1.0   branch develop   commit   branch feature/feature1   commit   commit   commit   checkout develop       commit   branch feature/feature2       commit id: \"feat(api): ...\"       commit   checkout develop       merge feature/feature1       merge feature/feature2   commit   checkout release/v1.1.0   merge develop   checkout main   merge release/v1.1.0   commit tag: \"v1.1.0\""},{"location":"reference/developer-workflows/#release","title":"Release","text":""},{"location":"reference/developer-workflows/#hotfix","title":"Hotfix","text":""},{"location":"reference/developer-workflows/#bugfix","title":"Bugfix","text":""},{"location":"reference/documentation-modes/","title":"Di\u00e1taxis Framework","text":""},{"location":"reference/documentation-modes/#diataxis-framework","title":"Di\u00e1taxis Framework","text":"<p>The Di\u00e1taxis framework is a systematic approach to technical documentation that was developed to address the challenge of structuring documentation in a clear and logical way. The framework consists of four distinct modes of documentation, each of which serves a distinct user need and requires a unique approach to creation.</p> <p> </p> Mode Focus Purpose Tutorials Learning-oriented Used to teach new users how to use a product or technology. How-To Guides Problem-oriented Provide solutions to specific problems or use cases. Technical Reference Information-oriented Provides detailed information on the features, functions, and capabilities of a product or technology. Explanation Understanding-oriented Provides conceptual information and context to help users understand a product or technology. <p>By adopting the Di\u00e1taxis framework, technical writers can ensure that their documentation is tailored to the user's needs and provides the information they need in a clear and concise manner. The framework has gained widespread adoption in the technical writing community and is considered a best practice for creating effective technical documentation.</p>"},{"location":"reference/documentation-modes/#tutorials","title":"Tutorials","text":"<p>Tutorials walk users through a process or task step-by-step. They should be structured in a clear and logical way, with each step building on the previous one. Tutorials should also include visuals and examples to help users understand the process.</p> <p>Example: A tutorial on how to create a new user account in a software application.</p> <p>Remember</p> <ul> <li>Clearly state the learning objective</li> <li>Break down the task into clear and concise steps</li> <li>Use images, diagrams, and examples to aid understanding</li> <li>Provide feedback and reinforcement to encourage learning</li> </ul>"},{"location":"reference/documentation-modes/#how-to-guides","title":"How-To Guides","text":"<p>How-to guides provide solutions to specific problems or use cases. They should be focused and concise, providing clear and actionable steps to solve the problem.</p> <p>Example: A how-to guide on how to troubleshoot a connectivity issue with a networking device.</p> <p>Remember</p> <ul> <li>Clearly state the problem or use case</li> <li>Provide a clear and concise solution</li> <li>Use screenshots or other visuals to help users understand the solution</li> <li>Test the solution to ensure it works as expected</li> </ul>"},{"location":"reference/documentation-modes/#technical-reference","title":"Technical Reference","text":"<p>Technical reference documentation provides detailed information on the features, functions, and capabilities of a product or technology. It should be well-organized and easy to navigate, with a clear and concise description of each feature or function.</p> <p>Example: Technical reference documentation for a software library, detailing each of its APIs and functions.</p> <p>Remember</p> <ul> <li>Clearly define each feature or function</li> <li>Provide detailed information on each feature or function, including   syntax, parameters, and return values</li> <li>Organize the information in a clear and logical manner</li> <li>Provide examples of how to use each feature or function</li> </ul>"},{"location":"reference/documentation-modes/#explanation","title":"Explanation","text":"<p>Explanation provides conceptual information and context to help users understand a product or technology. It should be clear and concise, providing context and explanation in a way that is easy to understand.</p> <p>Example: An explanation of the importance of project documentation and an overview of the Di\u00e1taxis framework.</p> <p>Remember</p> <ul> <li>Provide high-level overviews of the product or technology</li> <li>Provide conceptual information and context to help users understand the   product or technology</li> <li>Explain why the product or technology is important and how it fits into   the broader technology landscape</li> <li>Use analogies or other relatable examples to aid understanding</li> </ul>"},{"location":"reference/documentation-styling/","title":"Documentation Styling","text":""},{"location":"reference/documentation-styling/#documentation-styling","title":"Documentation Styling","text":"<p>Further reference</p> <ul> <li>MkDocs Material: Our chosen theme</li> <li>MkDocs Material Reference: Best quick-hand reference for styling</li> </ul>"},{"location":"reference/environment-variables/","title":"Environment Variables","text":""},{"location":"reference/environment-variables/#environment-variables","title":"Environment Variables","text":"<p>Note</p> <p>You are free to use any combination of setting and accessing environment   variables that you prefer. You must just ensure that   the environment variables are set before you run the script that uses them,   and that the environment variables are accessible   from the script that uses them.</p>"},{"location":"reference/environment-variables/#python","title":"Python","text":""},{"location":"reference/environment-variables/#defined-using-osenviron","title":"defined using <code>os.environ</code>","text":"<p>In Python, you can define environment variables using the <code>os.environ</code> dictionary. The following code snippet demonstrates how to define an environment variable named <code>VAR</code> in Python:</p> <pre><code>import os\n\nos.environ[\"VAR\"] = \"value\"\n</code></pre> <p>Warning</p> <p>This is not a recommended way to define environment variables for   sensitive information such as API keys. This method is not secure, as   the environment variables are stored in plain text in the Python script.</p>"},{"location":"reference/environment-variables/#defined-using-python-dotenv","title":"defined using <code>python-dotenv</code>","text":"<p>An alternative, more secure way to define environment variables in Python is to use the <code>python-dotenv</code> library. This library allows you to define environment variables in a <code>.env</code> file and load them into your Python script.</p> <ol> <li> <p>Install the <code>python-dotenv</code> library using <code>pip</code>:</p> <pre><code>pip install python-dotenv\n</code></pre> </li> <li> <p>Create a <code>.env</code> file in the same directory as your Python script and    define the environment variables in the following format:</p> <pre><code>VAR=value\n</code></pre> </li> <li> <p>Load the environment variables into your Python script using    the <code>load_dotenv</code> function:</p> <pre><code>from dotenv import load_dotenv\nload_dotenv()\n</code></pre> </li> </ol>"},{"location":"reference/environment-variables/#retrieved-using-osenvironget","title":"retrieved using <code>os.environ.get</code>","text":"<p>Following the definition of environment variables, you can access them in your Python script using the <code>os.environ.get</code> function.</p> <pre><code>import os\n\nmy_variable = os.environ.get(\"VAR\",\n                             None)  # Returns None if VAR is not set\nif my_variable:\n    # Use my_variable in your script\n    print(\"VAR is set to:\", my_variable)\nelse:\n    # VAR is not set, handle the error appropriately\n    print(\"VAR is not set.\")\n</code></pre>"},{"location":"reference/environment-variables/#c","title":"C++","text":""},{"location":"reference/environment-variables/#defined-using-setenv","title":"defined using <code>setenv</code>","text":"<p>In C++, you can define environment variables using the <code>setenv</code> function.</p> <pre><code>#include &lt;stdlib.h&gt;\n\nsetenv(\"VAR\", \"value\", 1);  // 1 indicates that the variable is overwritten if it already exists\n// 0 indicates that the variable is not overwritten if it already exists\n</code></pre>"},{"location":"reference/environment-variables/#retrieved-using-getenv","title":"retrieved using <code>getenv</code>","text":"<p>Following the definition of environment variables, you can access them in your C++ script using the <code>getenv</code> function.</p> <pre><code>#include &lt;stdlib.h&gt;\n\nchar* my_variable = getenv(\"VAR\");\n\nif (my_variable) {\n// Use my_variable in your script\nstd::cout &lt;&lt; \"VAR is set to: \" &lt;&lt; my_variable &lt;&lt; std::endl;\n} else {\n// VAR is not set, handle the error appropriately\nstd::cout &lt;&lt; \"VAR is not set.\" &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"reference/environment-variables/#unix-linux-macos","title":"Unix (Linux, macOS)","text":""},{"location":"reference/environment-variables/#defined-using-export","title":"defined using <code>export</code>","text":"<p>In Unix-based systems, environment variables can be defined temporarily in the current terminal session using the <code>export</code> keyword. This can also be done within a Bash script (<code>.sh</code>).</p> <pre><code>export VAR=\"value\"\n</code></pre>"},{"location":"reference/environment-variables/#defined-in-bashrc","title":"defined in <code>~/.bashrc</code>","text":"<p>In Unix-based systems, environment variables can be defined persistently across terminal sessions by adding the <code>export</code> statements to your shell profile file.</p> <ol> <li>Open your shell profile file using a text editor (    e.g. <code>nano ~/.bashrc</code>).</li> <li>Add the <code>export</code> statements to the file (preferably at the end).</li> <li>Save the file and close the text editor.</li> <li>Restart your terminal session.</li> <li> <p>Verify that the environment variables are set by running the following    command:</p> <pre><code>env | grep VAR\n</code></pre> </li> </ol> <p>Note</p> <p>If you are using zsh, you should use <code>~/.zshrc</code> instead of <code>~/.bashrc</code>.</p>"},{"location":"reference/environment-variables/#retrieved-using-var","title":"retrieved using <code>$VAR</code>","text":"<p>Following the definition of environment variables, you can access them in your Bash script using the <code>$VAR</code> syntax.</p> <pre><code>if [ -n \"$VAR\" ]; then\n# Use $VAR in your script\necho \"VAR is set to: $VAR\"\nelse\n# VAR is not set, handle the error appropriately\necho \"VAR is not set.\"\nfi\n</code></pre>"},{"location":"reference/environment-variables/#windows","title":"Windows","text":""},{"location":"reference/environment-variables/#defined-using-set","title":"defined using <code>set</code>","text":"<p>In Windows, environment variables can be defined temporarily in the current terminal session using the <code>set</code> keyword. This can also be done within a Batch script (<code>.bat</code>).</p> <pre><code>set VAR=value\n</code></pre>"},{"location":"reference/environment-variables/#defined-using-setx","title":"defined using <code>setx</code>","text":"<p>In Windows, environment variables can be defined persistently across terminal sessions by adding the <code>setx</code> statements to your system environment variables.</p> <ol> <li>Open the \"System Properties\" window by pressing <code>Windows + Pause/Break</code>    on your keyboard.</li> <li>Click \"Advanced system settings\" on the left.</li> <li>Click \"Environment Variables\" on the bottom right.</li> <li>Click \"New\" under \"System variables\" and add the environment variables.</li> <li>Click \"OK\" to save the changes.</li> <li>Restart your terminal session.</li> <li> <p>Verify that the environment variables are set by running the following    command:</p> <pre><code>set | findstr VAR\n</code></pre> </li> </ol>"},{"location":"reference/environment-variables/#retrieved-using-var_1","title":"retrieved using <code>%VAR%</code>","text":"<p>Following the definition of environment variables, you can access them in your Batch script using the <code>%VAR%</code> syntax.</p> <pre><code>if defined VAR (\n    rem Use %VAR% in your script\n    echo VAR is set to: %VAR%\n) else (\n    rem VAR is not set, handle the error appropriately\n    echo VAR is not set.\n)\n</code></pre>"},{"location":"reference/environment-variables/#azure-pipelines","title":"Azure Pipelines","text":"<p>Note</p> <p>This section is intended for maintainers of the feedstock repositories (at   current). If you are not a maintainer, you can safely ignore this section.</p> <ol> <li>Navigate to <code>dev.azure.com</code> and sign in.</li> </ol> <p></p> <ol> <li>Click the <code>feedstock-builds</code> project under    the <code>tudat-team</code> organization.</li> </ol> <p></p>"},{"location":"reference/environment-variables/#defined-for-a-pipeline","title":"defined for a pipeline","text":"<ol> <li>After navigating to the project, click \"    Pipelines\" under the <code>feedstock-builds</code> project.</li> </ol> <ol> <li>Click on the specific pipeline in which you want to set the environment    variable (e.g. <code>tudat-feedstock</code>).</li> </ol> <ol> <li>Click \"Edit\" in the top-right of the page.</li> </ol> <ol> <li>Click \"Variables\" in the top-right of the page.</li> </ol> <ol> <li>Update an existing token (e.g. <code>BINSTAR_TOKEN</code>), or create a new one    with the <code>+</code> icon.</li> </ol> <p>!!! note        It is crucial to keep the environment variables private and secure.        Ensure that you do not share them or commit them to a public repository,        as this could lead to security issues.</p>"},{"location":"reference/environment-variables/#defined-across-all-pipelines","title":"defined across all pipelines","text":"<p>Failure</p> <p>This section is the desired way of defining environment variables in   Azure. However, it is currently not possible to define environment   variables in an Azure project due to <code>conda-smithy</code> overwriting the   <code>pipeline.yaml</code>. This is a known issue, and we are working on a solution.   In the meantime, please use the method described in the previous section.   This section therefore exists for future reference.</p> <ol> <li>After navigating to the project, click \"    Library\" under the <code>feedstock-builds</code> project and select the target \"    variable group\".</li> </ol> <p></p> <ol> <li>Add a new variable by clicking <code>+ Add</code> or edit an existing one by    clicking the name of value of the variable.</li> </ol> <p></p> <ol> <li> <p>Make the variable group available by adding the following lines to    the <code>pipeline.yaml</code> file in the root of the feedstock repository.</p> <pre><code>variables:\n- group: &lt;variable_group_name&gt;\n</code></pre> </li> </ol> <p>!!! note        The <code>&lt;variable_group_name&gt;</code> should be the name of the variable group you        created in step 1.</p> <p>!!! failure        As mentioned, this will be overwritten by <code>conda-smithy</code>. It was        expected that by adding:</p> <pre><code>    ```yaml\n    azure:\n       variables:\n         - group: &lt;variable_group_name&gt;\n    ```\n\n    to the `conda-forge.yml` file, the `pipeline.yaml` would be updated accordingly, as [hinted at here](https://conda-forge.org/docs/maintainer/conda_forge_yml.html#azure). However, this is not the case. We are working on a solution.\n</code></pre>"},{"location":"reference/managing-tokens/","title":"Managing Tokens","text":""},{"location":"reference/managing-tokens/#managing-access-tokens","title":"Managing Access Tokens","text":"<p>An important part of the continuous integration (CI) process is the use  of access tokens to authenticate the user to the relevant services. This section describes how to generate access tokens for the following services:</p> <ul> <li>Anaconda Cloud</li> <li>GitHub</li> </ul>"},{"location":"reference/managing-tokens/#generating-access-tokens","title":"Generating Access Tokens","text":"<p>Access tokens are used to authenticate the user to the relevant service.  The following sections describe how to generate access tokens for the following services:</p>"},{"location":"reference/managing-tokens/#organization-tokens-on-anaconda-cloud","title":"Organization Tokens on Anaconda Cloud","text":"<p>Note</p> <p>This section is intended for maintainers of the feedstock repositories (at current). If you are not a maintainer, you can safely ignore this section.</p> <ol> <li> <p>Navigate to https://anaconda.org/ and sign in.</p> <p></p> </li> <li> <p>Go to the organization page, for example, if the organization is named \"tudat-team\", the URL would be https://anaconda.org/tudat-team.</p> </li> <li> <p>Click on the organization profile (\"tudat-team\") at the top-right of the page, followed by \"Settings\".</p> <p></p> </li> <li> <p>Fill in the details for creating a new token: name your token, provide the appropriate scope, and specify an expiration date. Then, click \"Create\".</p> <p></p> </li> <li> <p>The newly created organization token will be displayed. Copy the token and keep it safe, as it will only be shown once.</p> <p></p> <p>Important</p> <p>It is crucial to keep the organization token private and secure. Ensure that you do not share it or commit it to a public repository, as this could lead to security issues.</p> </li> </ol>"},{"location":"reference/managing-tokens/#user-tokens-on-github","title":"User Tokens on GitHub","text":"<ol> <li> <p>Navigate to GitHub and sign in.</p> <p></p> </li> <li> <p>Click on your profile picture at the top-right of the page to reveal a drop-down menu, select \"Settings\".</p> <p></p> <p>Tip</p> <p>Dark mode makes you a better developer.</p> </li> <li> <p>Click on \"Developer settings\".</p> <p></p> </li> <li> <p>Click on \"Personal access tokens\".</p> <p></p> <p>Note</p> <p>Currently, we use the classic tokens. Any developer is free to use the new fine-grained tokens, which are in Beta at the time of writing the current documentation, so long as it works. That developer must just modify the documentation accordingly.</p> </li> <li> <p>Click on \"Generate new token (classic)\".</p> <p></p> <p>Important</p> <p>The correct selection of the scopes is pertinent to the continued operation of the dependent systems. This may influence one to over-scope the permissions, in order to avoid having to scrutinize the required ones to save time, however over-scoping is a bad practice and should be avoided, so as to avoid any malicious attempts.  See the documentation stating the required scopes from the relevant service.</p> </li> <li> <p>Name your token, set an expiration time-delta, select the appropriate scopes, and finally click \"Generate token\".</p> <p></p> </li> <li> <p>Click on the copy icon provided, next to the token (or copy it yourself).</p> <p></p> <p>Important</p> <p>It is important to never commit code with the token. If this is done, the token will be deactivated immediately, automatically in most cases by the relevant service. For example, if you commit a Github token to Github, it will be automatically deleted. This is a good safety feature to have, but if done with a token which multiple components in our system are dependent on, the amount of work to rectify this will be tedious and better avoided through taking mental note of this now.</p> </li> </ol>"},{"location":"reference/managing-tokens/#storing-access-tokens","title":"Storing Access Tokens","text":"<p>Access tokens should be stored in a secure manner, so that they are not  exposed to the public. This is done by storing them as environment  variables, which are not committed to the repository.</p>"},{"location":"reference/managing-tokens/#azure-pipelines","title":"Azure Pipelines","text":"<p>See Environment Variables on Azure Pipelines.</p>"}]}